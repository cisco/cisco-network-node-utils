# interface
---
_template:
  config_set: ["interface <name>"]
  config_get_token: '/^interface <name>$/i'
  cli_ios_xr:
    config_get: "show running interface"
  cli_nexus:
    config_get: "show running interface all"

access_vlan:
  _exclude: [cli_ios_xr]
  kind: int
  config_get_token_append: '/^switchport access vlan (.*)$/'
  config_set_append: "switchport access vlan <vlan>"
  default_value: 1

all_interfaces:
  multiple:
  config_get_token: '/^interface (.*)/'

create:
  config_set: "interface <name>"

description:
  kind: string
  config_get_token_append: '/^description (.*)/'
  config_set_append: "<state> description <desc>"
  default_value: ""

destroy:
  config_set: "no interface <name>"

duplex:
  _exclude: [cli_ios_xr]
  kind: string
  config_get_token_append: '/^duplex (.*)$/'
  config_set_append: "duplex <duplex>"
  default_value: "auto"

encapsulation_dot1q:
  _exclude: [cli_ios_xr]
  kind: int
  default_value: ""
  config_get_token_append: '/^encapsulation dot1q (.*)/'
  config_set_append: "<state> encapsulation dot1q <vlan>"

feature_lacp:
  _exclude: [cli_ios_xr]
  kind: boolean
  config_get: "show running | i ^feature"
  config_get_token: '/^feature lacp$/'
  config_set: "<state> feature lacp"

feature_vlan:
  _exclude: [cli_ios_xr]
  cli_nexus:
    kind: boolean
    config_get: "show running | i ^feature"
    config_get_token: '/^feature interface-vlan$/'
    config_set: "<state> feature interface-vlan"

ipv4_addr_mask:
  # This handles both primary and secondary addresses
  multiple:
  cli_nexus:
    config_get_token_append: '/^ip address ([0-9\.]+)[\s\/](.*)/'
    config_set_append: "<state> ip address <addr>"
  cli_ios_xr:
    config_get_token_append: '/^ipv4 address ([0-9\.]+) (.*)/'
    config_set_append: '<state> ipv4 address <addr>'

ipv4_address:
  default_value: ~

ipv4_netmask_length:
  default_value: ~

ipv4_proxy_arp:
  kind: boolean
  default_value: false
  cli_nexus:
    config_get_token_append: '/^ip proxy-arp$/'
    config_set_append: "<state> ip proxy-arp"
  cli_ios_xr:
    config_get_token_append: '/^proxy-arp$/'
    config_set_append: "<state> proxy-arp"

ipv4_redirects_loopback:
  kind: boolean
  cli_nexus:
    default_only: false
  cli_ios_xr:
    config_get_token_append: '/^((?:no )?ipv4 redirects)$/'
    config_set_append: "<state> ipv4 redirects"
    default_value: false
    test_config_get_regex: [
    '/^\s+ipv4 redirects/',
    '/^\s+no ipv4 redirects/'
    ]

ipv4_redirects_other_interfaces:
  kind: boolean
  test_config_result:
    false: false
    true: true
  cli_nexus:
    config_get_token_append: '/^((?:no )?ip redirects)$/'
    config_set_append: "<state> ip redirects"
    default_value: true
    test_config_get_regex: [
    '/^\s+ip redirects/',
    '/^\s+no ip redirects/'
    ]
  cli_ios_xr:
    config_get_token_append: '/^((?:no )?ipv4 redirects)$/'
    config_set_append: "<state> ipv4 redirects"
    default_value: false
    test_config_get_regex: [
    '/^\s+ipv4 redirects/',
    '/^\s+no ipv4 redirects/'
    ]

mtu_loopback:
  kind: boolean
  default_only: ~

mtu_other_interfaces:
  kind: int
  config_get_token_append: '/^mtu (.*)$/'
  config_set_append: "<state> mtu <mtu>"
  cli_nexus:
    default_value: 1500
  cli_ios_xr:
    default_value: 1514

negotiate_auto_ethernet:
  kind: boolean
  _exclude: [cli_ios_xr]
  test_config_get_regex: [
  '/^\s+no negotiate auto/',
  '/^\s+negotiate auto/'
  ]
  /(N7K|C3064)/:
    default_only: false
  else:
    config_get_token_append: '/^(no )?negotiate auto$/'
    config_set_append: "<state> negotiate auto"
    default_value: true

negotiate_auto_other_interfaces:
  kind: boolean
  default_only: false

negotiate_auto_portchannel:
  kind: boolean
  cli_nexus:
    test_config_get_regex: [
    '/^\s+no negotiate auto/',
    '/^\s+negotiate auto/'
    ]
    /N7K/:
      default_only: false
    else:
      config_get_token_append: '/^(no )?negotiate auto$/'
      config_set_append: "<state> negotiate auto"
      default_value: true
  cli_ios_xr:
    config_get_token_append: '/^negotiation auto$/'
    config_set_append: "<state> negotiation auto"
    default_value: true

shutdown:
  kind: boolean
  config_get_token_append: '/^shutdown$/'
  config_set_append: "<state> shutdown"

shutdown_ether_channel:
  default_value: false

shutdown_ethernet_noswitchport_noshutdown:
  default_value: false

shutdown_ethernet_noswitchport_shutdown:
  default_value: false

shutdown_ethernet_switchport_noshutdown:
  default_value: false

shutdown_ethernet_switchport_shutdown:
  default_value: true

shutdown_loopback:
  default_value: false

shutdown_unknown:
  default_value: true

shutdown_vlan:
  cli_nexus:
    default_value: true

speed:
  _exclude: [cli_ios_xr]
  config_get_token_append: '/^speed (.*)$/'
  config_set_append: "speed <speed>"
  default_value: "auto"

svi_autostate:
  _exclude: [cli_ios_xr]
  kind: boolean
  config_get_token_append: '/^(?:no )?autostate$/'
  config_set_append: "<state> autostate"
  default_value: true

svi_management:
  _exclude: [cli_ios_xr]
  kind: boolean
  config_get_token_append: '/^management$/'
  config_set_append: "<state> management"
  default_value: false

switchport:
  _exclude: [cli_ios_xr]
  kind: boolean
  config_get_token_append: '/^switchport$/'
  config_set_append: "<state> switchport"
  # default_value: n/a. This is derived from system_default_switchport

switchport_autostate_exclude:
  _exclude: [cli_ios_xr]
  kind: boolean
  config_get_token_append: '/(^switchport autostate exclude)/'
  config_set_append: "<state> switchport autostate exclude"
  default_value: false

switchport_mode_dot1q_tunnel:
  _exclude: [cli_ios_xr]
  default_only: ""

switchport_mode_ethernet:
  _exclude: [cli_ios_xr]
  auto_default: false
  config_get_token_append: '/^(?:no )?switchport mode ?(.*)$/'
  config_set_append: "<state> switchport mode <mode>"
  default_value: "access"

switchport_mode_other_interfaces:
  _exclude: [cli_ios_xr]
  default_only: ""

switchport_mode_port_channel:
  _exclude: [cli_ios_xr]
  config_get_token_append: '/^switchport mode (.*)$/'
  config_set_append: "<state> switchport mode <mode>"
  default_value: ""

switchport_trunk_allowed_vlan:
  _exclude: [cli_ios_xr]
  config_get_token_append: '/^switchport trunk allowed vlan (.*)$/'
  config_set_append: "<state> switchport trunk allowed vlan <vlan>"
  default_value: "all"

switchport_trunk_native_vlan:
  _exclude: [cli_ios_xr]
  kind: int
  config_get_token_append: '/^switchport trunk native vlan (.*)$/'
  config_set_append: "<state> switchport trunk native vlan <vlan>"
  default_value: 1

system_default_svi_autostate:
  kind: boolean
  cli_nexus:
    config_get: "show running all | include 'system default'"
    config_get_token: ['/^system default interface-vlan autostate$/']
    # default_value: n/a. This is a user-configurable system default.
  cli_ios_xr:
    default_only: false

system_default_switchport:
  kind: boolean
  cli_nexus:
    config_get: "show running all | include 'system default'"
    config_get_token: ['/^no system default switchport$/']
    default_value: true
  cli_ios_xr:
    default_only: false

system_default_switchport_shutdown:
  kind: boolean
  cli_nexus:
    config_get: "show running all | include 'system default'"
    config_get_token: ['/^system default switchport shutdown$/']
    # default_value: n/a. This is a user-configurable system default.
  cli_ios_xr:
    default_only: true

vrf:
  default_value: ""
  cli_nexus:
    config_get_token_append: '/^vrf member (.*)/'
    config_set_append: "<state> vrf member <vrf>"
  cli_ios_xr:
    config_get_token_append: '/^vrf (.*)/'
    config_set_append: "<state> vrf <vrf>"

vtp:
  _exclude: [cli_ios_xr]
  kind: boolean
  config_get_token_append: '/^vtp *$/'
  config_set_append: "<state> vtp"
  default_value: false
